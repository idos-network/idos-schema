database idos;

use idos {
    registry_address: '0x1a45583B15AAfE2d11B738e7E49Fd01A0fCD6890',
    chain: 'eth'
} as idos_eth;

use idos {
    registry_address: 'idos-dev-2.testnet',
    chain: 'near'
} as idos_near;

table humans {
    id text primary minlen(36) maxlen(36) notnull unique //lengths to help enforce uuidv4
}

table human_attributes {
    id text primary minlen(36) maxlen(36) notnull unique,
    human_id text minlen(36) maxlen(36) notnull,
    attribute_key text notnull,
    value text notnull,
    foreign_key (human_id) references humans(id) on_delete cascade
}

table shared_human_attributes {
    original_id text minlen(36) maxlen(36) notnull,
    duplicate_id text minlen(36) maxlen(36) notnull,
    #primary_key primary(original_id, duplicate_id),
    foreign_key (original_id) references human_attributes(id) on_delete cascade,
    foreign_key (duplicate_id) references human_attributes(id) on_delete cascade
}

table wallets {
    id text primary minlen(36) maxlen(36) notnull unique,
    human_id text minlen(36) maxlen(36) notnull,
    address text notnull,
    public_key text notnull,
    message text,
    signature text,
    foreign_key (human_id) references humans(id) on_delete cascade
}

table credentials {
    id text primary minlen(36) maxlen(36) notnull unique,
    human_id text minlen(36) maxlen(36) notnull,
    issuer text notnull,
    credential_type text notnull,
    content text notnull,
    encryption_public_key text notnull,
    foreign_key (human_id) references humans(id) on_delete cascade
}

table shared_credentials {
    original_id text minlen(36) maxlen(36) notnull,
    duplicate_id text minlen(36) maxlen(36) notnull,
    #primary_key primary(original_id, duplicate_id),
    foreign_key (original_id) references credentials(id) on_delete cascade,
    foreign_key (duplicate_id) references credentials(id) on_delete cascade
}

action add_human_as_owner($id) public { // this is temporary for easy adding users not through nautilus for test purposes
    INSERT INTO humans (id) VALUES ($id);
}

action add_wallet_as_owner($id, $human_id, $address, $public_key, $message, $signature) owner public {
    INSERT INTO wallets (id, human_id, address, public_key, message, signature)
    VALUES ($id, $human_id, $address, $public_key, $message, $signature);
}

action upsert_credential_as_owner($id, $human_id, $issuer, $credential_type, $content, $encryption_public_key) owner public {
    INSERT INTO credentials (id, human_id, issuer, credential_type, content, encryption_public_key)
    VALUES ($id, $human_id, $issuer, $credential_type, $content, $encryption_public_key)
    ON CONFLICT(id) DO UPDATE
    SET issuer=$issuer, content=$content, encryption_public_key=$encryption_public_key;
}

action delete_human_as_owner($id) owner public { //for testing period, for not to drop a DB if we need to clear it
    DELETE FROM humans WHERE id=$id;
}

action get_attributes() public view mustsign {
	SELECT DISTINCT ha.id, ha.human_id, ha.attribute_key, ha.value, sha.original_id AS original_id
    FROM human_attributes AS ha
    LEFT JOIN shared_human_attributes AS sha ON ha.id = sha.duplicate_id
    INNER JOIN wallets ON ha.human_id = wallets.human_id
    WHERE wallets.address = address(@caller) COLLATE NOCASE OR wallets.public_key = public_key(@caller, 'base64') COLLATE NOCASE;
}

action add_attribute($id, $attribute_key, $value) public mustsign {
    INSERT INTO human_attributes (id, human_id, attribute_key, value)
    VALUES (
        $id,
        (SELECT DISTINCT human_id FROM wallets WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE),
        $attribute_key,
        $value
    );
}

action add_attribute_as_owner($id, $human_id, $attribute_key, $value) owner public {
    INSERT INTO human_attributes (id, human_id, attribute_key, value)
    VALUES (
        $id,
        $human_id,
        $attribute_key,
        $value
    );
}

action edit_attribute($id, $attribute_key, $value) public mustsign {
    UPDATE human_attributes
    SET attribute_key=$attribute_key, value=$value
    WHERE id=$id
    AND human_id=(SELECT DISTINCT human_id FROM wallets WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE);
}

action remove_attribute($id) public mustsign {
    DELETE FROM human_attributes
    WHERE id=$id
    AND human_id=(SELECT DISTINCT human_id FROM wallets WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE);
}

action get_wallets() public view mustsign {
    SELECT DISTINCT w1.*
    FROM wallets AS w1
    INNER JOIN wallets AS w2 ON w1.human_id = w2.human_id
    WHERE w2.address = address(@caller) COLLATE NOCASE OR w2.public_key = public_key(@caller, 'base64') COLLATE NOCASE;
}

action add_wallet($id, $address, $message, $signature) public mustsign {
    INSERT INTO wallets (id, human_id, address, public_key, message, signature)
    VALUES (
        $id,
        (SELECT DISTINCT human_id FROM wallets WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE),
        $address,
        public_key(@caller, 'base64'),
        $message,
        $signature
    );
}

action remove_wallet($id) public mustsign {
    DELETE FROM wallets
    WHERE id=$id AND human_id=(SELECT DISTINCT human_id FROM wallets WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE);
}

action get_wallet_human_id() public view mustsign {
    SELECT DISTINCT human_id FROM wallets
    WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE;
}
action get_credentials() public view mustsign {
	SELECT DISTINCT c.id, c.human_id, c.issuer, c.credential_type, sc.original_id AS original_id
    FROM credentials AS c
    LEFT JOIN shared_credentials AS sc ON c.id = sc.duplicate_id
    INNER JOIN wallets ON c.human_id = wallets.human_id
    WHERE wallets.address = address(@caller) COLLATE NOCASE OR wallets.public_key = public_key(@caller, 'base64') COLLATE NOCASE;
}

action add_credential($id, $issuer, $credential_type, $content, $encryption_public_key) public mustsign {
    INSERT INTO credentials (id, human_id, issuer, credential_type, content, encryption_public_key)
    VALUES (
        $id,
        (SELECT DISTINCT human_id from wallets WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE),
        $issuer,
        $credential_type,
        $content,
        $encryption_public_key
    );
}

action share_credential($id, $original_credential_id, $issuer, $credential_type, $content, $encryption_public_key) public mustsign {
    INSERT INTO credentials (id, human_id, issuer, credential_type, content, encryption_public_key)
    VALUES (
        $id,
        (SELECT DISTINCT human_id from wallets WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE),
        $issuer,
        $credential_type,
        $content,
        $encryption_public_key
    );

    add_shared_credential($original_credential_id, $id);
}

action edit_credential($id, $issuer, $credential_type, $content, $encryption_public_key) public mustsign {
    UPDATE credentials
    SET issuer=$issuer, credential_type=$credential_type, content=$content, encryption_public_key=$encryption_public_key
    WHERE id=$id
    AND human_id=(SELECT DISTINCT human_id FROM wallets WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE);
}

action remove_credential($id) public mustsign {
    DELETE FROM credentials
    WHERE id=$id
    AND human_id=(SELECT human_id FROM wallets WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE);
}

action get_credential_owned ($id) public view mustsign {
    SELECT DISTINCT credentials.*
    FROM credentials
    INNER JOIN wallets ON credentials.human_id = wallets.human_id
    WHERE credentials.id = $id
    AND wallets.address = address(@caller) COLLATE NOCASE OR wallets.public_key = public_key(@caller, 'base64') COLLATE NOCASE;
}

action get_credential_shared ($id) public mustsign {
    $has_grants_on_eth = idos_eth.has_grants(@caller_address, $id);
    $has_grant_on_near = idos_near.has_grants(@caller_address, $id);

    SELECT CASE
        WHEN $has_grant_on_eth != 1 AND $has_grant_on_near != 1
        THEN ERROR('caller does not have access') END;

    SELECT *
    FROM credentials
    WHERE id = $id;
}

action share_attribute($id, $original_attribute_id, $attribute_key, $value) public mustsign {
    INSERT INTO human_attributes (id, human_id, attribute_key, value)
    VALUES (
        $id,
        (SELECT DISTINCT human_id from wallets WHERE address=address(@caller) COLLATE NOCASE OR public_key = public_key(@caller, 'base64') COLLATE NOCASE),
        $attribute_key,
        $value
    );

    add_shared_attribute($original_attribute_id, $id);
}

action add_shared_credential($original_id, $duplicate_id) owner public {
    INSERT INTO shared_credentials (original_id, duplicate_id)
    VALUES ($original_id, $duplicate_id);
}

action add_shared_attribute($original_id, $duplicate_id) owner public {
    INSERT INTO shared_human_attributes (original_id, duplicate_id)
    VALUES ($original_id, $duplicate_id);
}
