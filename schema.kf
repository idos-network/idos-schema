database idos;

use idos {
    registry_address: "0xdFfd3319Bb0978Ea656da41Bb8728eE163AA33F2"
} as idos;

table humans {
    id text primary minlen(36) maxlen(36) notnull unique //lengths to help enforce uuidv4
}

table human_attributes {
    id text primary minlen(36) maxlen(36) notnull unique,
    human_id text minlen(36) maxlen(36) notnull,
    attribute_key text notnull,
    value text notnull,
    foreign_key (human_id) references humans(id) on_delete cascade
}

table wallets {
    id text primary minlen(36) maxlen(36) notnull unique,
    human_id text minlen(36) maxlen(36) notnull,
    address text notnull,
    message text notnull,
    signature text notnull,
    foreign_key (human_id) references humans(id) on_delete cascade
}

table credentials {
    id text primary minlen(36) maxlen(36) notnull unique,
    human_id text minlen(36) maxlen(36) notnull,
    issuer text notnull,
    credential_type text notnull,
    content text notnull,
    foreign_key (human_id) references humans(id) on_delete cascade
}

action add_human_private($id) private {
    INSERT INTO humans (id) VALUES ($id);
}

action add_wallet_private($id, $human_id, $address, $message, $signature) private {
    INSERT INTO wallets (id, human_id, address, message, signature)
    VALUES ($id, $human_id, $address, $message, $signature);
}

action add_credential_private($id, $human_id, $issuer, $credential_type, $content) private {
    INSERT INTO credentials (id, human_id, issuer, credential_type, content)
    VALUES ($id, $human_id, $issuer, $credential_type, $content);
}

action delete_human_private($id) private { //for testing period, for not to drop a DB if we need to clear it
    DELETE FROM humans WHERE id=$id;
}

action get_attributes() public {
	SELECT * from human_attributes
    WHERE human_id=(SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE);
}

action add_attribute($id, $attribute_key, $value) public {
    INSERT INTO human_attributes (id, human_id, attribute_key, value)
    VALUES ($id, (SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE), $attribute_key, $value);
}

action edit_attribute($id, $attribute_key, $value) public {
    UPDATE human_attributes
    SET attribute_key=$attribute_key, value=$value
    WHERE id=$id AND human_id=(SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE);
}

action remove_attribute($id) public {
    DELETE from human_attributes
    WHERE id=$id AND human_id=(SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE);
}

action get_wallets() public {
	SELECT * from wallets
    WHERE human_id=(SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE);
}

action add_wallet($id, $address, $message, $signature) public {
    INSERT INTO wallets (id, human_id, address, message, signature)
    VALUES ($id, (SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE), $address, $message, $signature);
}

action remove_wallet($id) public {
    DELETE from wallets
    WHERE id=$id AND human_id=(SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE);
}

action get_wallet_human_id() public {
  SELECT human_id FROM wallets
    WHERE address=@caller COLLATE NOCASE;
}

action get_credentials() public {
	SELECT * from credentials
    WHERE human_id=(SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE);
}

action add_credential($id, $issuer, $credential_type, $content) public {
    INSERT INTO credentials (id, human_id, issuer, credential_type, content)
    VALUES ($id, (SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE), $issuer, $credential_type, $content);
}

action edit_credential($id, $issuer, $credential_type, $content) public {
    UPDATE credentials
    SET issuer=$issuer, credential_type=$credential_type, content=$content
    WHERE id=$id AND human_id=(SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE);
}

action remove_credential($id) public {
    DELETE from credentials
    WHERE id=$id AND human_id=(SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE);
}

action get_credential_owned ($id) public {
		SELECT *
		FROM credentials
		WHERE id = $id
				AND human_id=(SELECT human_id from wallets WHERE address=@caller COLLATE NOCASE);
}

action get_credential_shared ($id) public {
		$can_access = idos.has_grants(@caller, $id);

		SELECT CASE WHEN $can_access != 1 THEN ERROR('caller does not have access') END;

    SELECT *
		FROM credentials
		WHERE id = $id;
}
