database idos;

use idos {
    registry_address: '0x827310fF816EfD65406a40cb1358cc82Bc2F5cF9',
    chain: 'eth'
} as idos_eth;

use idos {
    registry_address: 'idos-dev-2.testnet',
    chain: 'near'
} as idos_near;

table humans {
    id text primary minlen(36) maxlen(36) notnull unique //lengths to help enforce uuidv4
}

table human_attributes {
    id text primary minlen(36) maxlen(36) notnull unique,
    human_id text minlen(36) maxlen(36) notnull,
    attribute_key text notnull,
    value text notnull,
    foreign_key (human_id) references humans(id) on_delete cascade
}

table shared_human_attributes {
    original_id text minlen(36) maxlen(36) notnull,
    duplicate_id text minlen(36) maxlen(36) notnull,
    #primary_key primary(original_id, duplicate_id),
    foreign_key (original_id) references human_attributes(id) on_delete cascade,
    foreign_key (duplicate_id) references human_attributes(id) on_delete cascade
}

table wallets {
    id text primary minlen(36) maxlen(36) notnull unique,
    human_id text minlen(36) maxlen(36) notnull,
    address text notnull,
    public_key text,
    wallet_type text notnull,
    message text,
    signature text,
    foreign_key (human_id) references humans(id) on_delete cascade
}

table credentials {
    id text primary minlen(36) maxlen(36) notnull unique,
    human_id text minlen(36) maxlen(36) notnull,
    issuer text notnull,
    credential_type text notnull,
    credential_level text,
    credential_status text,
    content text notnull,
    encryption_public_key text notnull,
    foreign_key (human_id) references humans(id) on_delete cascade
}

table shared_credentials {
    original_id text minlen(36) maxlen(36) notnull,
    duplicate_id text minlen(36) maxlen(36) notnull,
    #primary_key primary(original_id, duplicate_id),
    foreign_key (original_id) references credentials(id) on_delete cascade,
    foreign_key (duplicate_id) references credentials(id) on_delete cascade
}

action add_human_as_owner($id) owner public {
    INSERT INTO humans (id) VALUES ($id);
}

action upsert_wallet_as_owner($id, $human_id, $address, $public_key, $wallet_type, $message, $signature) owner public {
    SELECT CASE
        WHEN $wallet_type = 'NEAR' AND ($public_key IS NULL OR length($public_key) != 52)
        THEN ERROR('NEAR wallets require a valid public_key to be given.')
    END;

    INSERT INTO wallets (id, human_id, address, public_key, wallet_type, message, signature)
    VALUES ($id, $human_id, $address, $public_key, $wallet_type, $message, $signature)
    ON CONFLICT(id) DO UPDATE
    SET human_id=$human_id, address=$address, public_key=$public_key, message=$message, signature=$signature;
}

action upsert_credential_as_owner($id, $human_id, $issuer, $credential_type, $credential_level, $credential_status, $content, $encryption_public_key) owner public {
    INSERT INTO credentials (id, human_id, issuer, credential_type, credential_level, credential_status, content, encryption_public_key)
    VALUES ($id, $human_id, $issuer, $credential_type, $credential_level, $credential_status, $content, $encryption_public_key)
    ON CONFLICT(id) DO UPDATE
    SET issuer=$issuer, credential_status=$credential_status, content=$content, encryption_public_key=$encryption_public_key;
}

action delete_human_as_owner($id) owner public { //for testing period, for not to drop a DB if we need to clear it
    DELETE FROM humans WHERE id=$id;
}

@kgw(authn='true')
action get_attributes() public view {
    $converted = idos_near.implicit_address_to_public_key(@caller);
	SELECT DISTINCT ha.id, ha.human_id, ha.attribute_key, ha.value, sha.original_id AS original_id
    FROM human_attributes AS ha
    LEFT JOIN shared_human_attributes AS sha ON ha.id = sha.duplicate_id
    INNER JOIN wallets ON ha.human_id = wallets.human_id
    WHERE (
        wallets.wallet_type = 'EVM' AND wallets.address = @caller COLLATE NOCASE
    ) OR (
        wallets.wallet_type = 'NEAR' AND wallets.public_key = $converted
    );
}

@kgw(authn='true')
action add_attribute($id, $attribute_key, $value) public {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    INSERT INTO human_attributes (id, human_id, attribute_key, value)
    VALUES (
        $id,
        (SELECT DISTINCT human_id FROM wallets WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
            OR (wallet_type = 'NEAR' AND public_key = $converted)
        ),
        $attribute_key,
        $value
    );
}

action add_attribute_as_owner($id, $human_id, $attribute_key, $value) owner public {
    INSERT INTO human_attributes (id, human_id, attribute_key, value)
    VALUES (
        $id,
        $human_id,
        $attribute_key,
        $value
    );
}

@kgw(authn='true')
action edit_attribute($id, $attribute_key, $value) public {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    UPDATE human_attributes
    SET attribute_key=$attribute_key, value=$value
    WHERE id=$id
    AND human_id=(SELECT DISTINCT human_id FROM wallets WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
        OR (wallet_type = 'NEAR' AND public_key = $converted)
    );
}

@kgw(authn='true')
action remove_attribute($id) public {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    DELETE FROM human_attributes
    WHERE id=$id
    AND human_id=(SELECT DISTINCT human_id FROM wallets WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
        OR (wallet_type = 'NEAR' AND public_key = $converted)
    );
}

@kgw(authn='true')
action get_wallets() public view {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    SELECT DISTINCT w1.*
    FROM wallets AS w1
    INNER JOIN wallets AS w2 ON w1.human_id = w2.human_id
    WHERE (
        w2.wallet_type = 'EVM' AND w2.address = @caller COLLATE NOCASE
    ) OR (
        w2.wallet_type = 'NEAR' AND w2.public_key = $converted
    );
}

@kgw(authn='true')
action remove_wallet($id) public {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    DELETE FROM wallets
    WHERE id=$id AND human_id=(SELECT DISTINCT human_id FROM wallets WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
        OR (wallet_type = 'NEAR' AND public_key = $converted)
    );
}

action has_profile($address) public view {
    SELECT EXISTS(
        SELECT 1 FROM wallets WHERE address=$address COLLATE NOCASE
    ) AS has_profile;
}

@kgw(authn='true')
action get_wallet_human_id() public view {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    SELECT DISTINCT human_id FROM wallets
    WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
        OR (wallet_type = 'NEAR' AND public_key = $converted);
}

@kgw(authn='true')
action get_credentials() public view {
    $converted = idos_near.implicit_address_to_public_key(@caller);
	SELECT DISTINCT c.id, c.human_id, c.issuer, c.credential_type, c.credential_level, c.credential_status, sc.original_id AS original_id
    FROM credentials AS c
    LEFT JOIN shared_credentials AS sc ON c.id = sc.duplicate_id
    INNER JOIN wallets ON c.human_id = wallets.human_id
    WHERE (
        wallets.wallet_type = 'EVM' AND wallets.address = @caller COLLATE NOCASE
    ) OR (
        wallets.wallet_type = 'NEAR' AND wallets.public_key = $converted
    );
}

@kgw(authn='true')
action add_credential($id, $issuer, $credential_type, $credential_level, $credential_status, $content, $encryption_public_key) public {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    INSERT INTO credentials (id, human_id, issuer, credential_type, credential_level, credential_status, content, encryption_public_key)
    VALUES (
        $id,
        (SELECT DISTINCT human_id FROM wallets WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
            OR (wallet_type = 'NEAR' AND public_key = $converted)
        ),
        $issuer,
        $credential_type,
        $credential_level,
        $credential_status,
        $content,
        $encryption_public_key
    );
}

@kgw(authn='true')
action share_credential($id, $original_credential_id, $issuer, $credential_type, $credential_level, $credential_status, $content, $encryption_public_key) public {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    INSERT INTO credentials (id, human_id, issuer, credential_type, credential_level, credential_status, content, encryption_public_key)
    VALUES (
        $id,
        (SELECT DISTINCT human_id FROM wallets WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
            OR (wallet_type = 'NEAR' AND public_key = $converted)
        ),
        $issuer,
        $credential_type,
        $credential_level,
        $credential_status,
        $content,
        $encryption_public_key
    );

    add_shared_credential($original_credential_id, $id);
}

@kgw(authn='true')
action edit_credential($id, $issuer, $credential_type, $credential_level, $credential_status, $content, $encryption_public_key) public {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    UPDATE credentials
    SET issuer=$issuer, credential_type=$credential_type, credential_level=$credential_level, credential_status=$credential_status, content=$content, encryption_public_key=$encryption_public_key
    WHERE id=$id
    AND human_id=(SELECT DISTINCT human_id FROM wallets WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
        OR (wallet_type = 'NEAR' AND public_key = $converted)
    );
}

@kgw(authn='true')
action remove_credential($id) public {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    DELETE FROM credentials
    WHERE id=$id
    AND human_id=(SELECT DISTINCT human_id FROM wallets WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
        OR (wallet_type = 'NEAR' AND public_key = $converted)
    );
}

@kgw(authn='true')
action get_credential_owned ($id) public view {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    SELECT DISTINCT credentials.*
    FROM credentials
    INNER JOIN wallets ON credentials.human_id = wallets.human_id
    WHERE credentials.id = $id
    AND (
        (wallets.wallet_type = 'EVM' AND wallets.address = @caller COLLATE NOCASE)
            OR (wallets.wallet_type = 'NEAR' AND wallets.public_key = $converted)
    );
}

@kgw(authn='true')
action get_credential_shared ($id) public view {
    $has_grant_on_eth = idos_eth.has_grants(@caller, $id);
    $has_grant_on_near = idos_near.has_grants(@caller, $id);

    SELECT CASE
        WHEN $has_grant_on_eth != 1 AND $has_grant_on_near != 1
        THEN ERROR('caller does not have access') END;

    SELECT *
    FROM credentials
    WHERE id = $id;
}

@kgw(authn='true')
action share_attribute($id, $original_attribute_id, $attribute_key, $value) public {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    INSERT INTO human_attributes (id, human_id, attribute_key, value)
    VALUES (
        $id,
        (SELECT DISTINCT human_id FROM wallets WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
            OR (wallet_type = 'NEAR' AND public_key = $converted)
        ),
        $attribute_key,
        $value
    );

    add_shared_attribute($original_attribute_id, $id);
}

action add_shared_credential($original_id, $duplicate_id) owner public {
    INSERT INTO shared_credentials (original_id, duplicate_id)
    VALUES ($original_id, $duplicate_id);
}

action add_shared_attribute($original_id, $duplicate_id) owner public {
    INSERT INTO shared_human_attributes (original_id, duplicate_id)
    VALUES ($original_id, $duplicate_id);
}

@kgw(authn='true')
action add_wallet($id, $address, $public_key, $message, $signature) public {
    $converted = idos_near.implicit_address_to_public_key(@caller);
    $wallet_type = idos_near.determine_wallet_type($address);

    SELECT CASE
        WHEN $wallet_type = 'NEAR' AND ($public_key IS NULL OR length($public_key) != 52)
        THEN ERROR('NEAR wallets require a valid public_key to be given.')
    END;

    INSERT INTO wallets (id, human_id, address, public_key, wallet_type, message, signature)
    VALUES (
        $id,
        (SELECT DISTINCT human_id FROM wallets WHERE (wallet_type = 'EVM' AND address=@caller COLLATE NOCASE)
            OR (wallet_type = 'NEAR' AND public_key = $converted)
        ),
        $address,
        CASE
            WHEN $public_key = '' THEN NULL
            ELSE $public_key
        END,
        $wallet_type,
        $message,
        $signature
    );
}
